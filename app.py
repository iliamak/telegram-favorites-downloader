import streamlit as st
import os
import tempfile
import zipfile
import io
from telethon import TelegramClient, functions, types
from telethon.errors import SessionPasswordNeededError
from telethon.sessions import StringSession
import asyncio
import nest_asyncio
from PIL import Image
import base64
from datetime import datetime
import atexit

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ nest_asyncio –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –≤ Streamlit
nest_asyncio.apply()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
active_clients = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
def cleanup_clients():
    for client in active_clients:
        try:
            asyncio.run_coroutine_threadsafe(client.disconnect(), asyncio.get_event_loop())
        except:
            pass

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
atexit.register(cleanup_clients)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(
    page_title="Telegram Favorites Downloader",
    page_icon="üìÅ",
    layout="wide",
)

# API –¥–ª—è Telegram (–±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
try:
    API_ID = st.secrets["API_ID"]
    API_HASH = st.secrets["API_HASH"]
except KeyError:
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    API_ID = 1713092
    API_HASH = "c96e3d68d80373c29270bb8a2edbb1f5"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
def run_async(coro):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop = asyncio.get_event_loop()
    except RuntimeError:
        # –ï—Å–ª–∏ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    
    return loop.run_until_complete(coro)

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –º–µ–¥–∏–∞
def get_media_type(message):
    if message.photo:
        return 'photo'
    elif message.video:
        return 'video'
    elif message.document:
        return 'document'
    elif message.audio:
        return 'audio'
    elif message.voice:
        return 'voice'
    else:
        return 'unknown'

# –ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞
def get_filename(message):
    if message.photo:
        return f"photo_{message.id}.jpg"
    elif message.video:
        return getattr(message.video.attributes[0], 'file_name', f"video_{message.id}.mp4") if hasattr(message.video, 'attributes') and message.video.attributes else f"video_{message.id}.mp4"
    elif message.document:
        return getattr(message.document.attributes[0], 'file_name', f"document_{message.id}") if hasattr(message.document, 'attributes') and message.document.attributes else f"document_{message.id}"
    elif message.audio:
        return getattr(message.audio.attributes[0], 'file_name', f"audio_{message.id}.mp3") if hasattr(message.audio, 'attributes') and message.audio.attributes else f"audio_{message.id}.mp3"
    elif message.voice:
        return f"voice_{message.id}.ogg"
    else:
        return f"file_{message.id}"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º StringSession
def create_client():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º StringSession –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    session_str = st.session_state.get('session_string', '')
    client = TelegramClient(StringSession(session_str), API_ID, API_HASH)
    active_clients.append(client)
    return client

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async def save_session_string(client):
    session_str = client.session.save()
    st.session_state['session_string'] = session_str

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def main_page():
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.title("Telegram Favorites Downloader")
        st.subheader("–°–∫–∞—á–∏–≤–∞–π—Ç–µ –º–µ–¥–∏–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ Telegram –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ")

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        cols = st.columns(3)
        with cols[0]:
            st.markdown("""
            ### ‚ú® –õ–µ–≥–∫–∏–π –¥–æ—Å—Ç—É–ø
            –ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–∞—à–∏–º –∏–∑–±—Ä–∞–Ω–Ω—ã–º –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
            """)
        with cols[1]:
            st.markdown("""
            ### üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö - –≤—Å—ë –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º
            """)
        with cols[2]:
            st.markdown("""
            ### üíæ –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            –°–∫–∞—á–∏–≤–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –≤—Å–µ —Å—Ä–∞–∑—É –≤ ZIP-–∞—Ä—Ö–∏–≤–µ
            """)

        st.write("")
        st.write("### –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
        st.write("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–∏–º –∏–∑–±—Ä–∞–Ω–Ω—ã–º –º–µ–¥–∏–∞ –≤ Telegram, –≤–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç:")
        
        if st.button("–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram", type="primary", use_container_width=True):
            st.session_state.page = "login"
            st.rerun()
            
        st.divider()
        st.caption("–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram API –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å Telegram Inc.")
        st.caption("¬© 2025 Telegram Favorites Downloader")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
def login_page():
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.title("–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram")
        st.write("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Telegram")
        
        with st.form("login_form"):
            phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã)", placeholder="+79123456789")
            submit = st.form_submit_button("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", use_container_width=True)
            
            if submit and phone:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telegram
                    client = create_client()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    async def send_code():
                        await client.connect()
                        if not await client.is_user_authorized():
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç phone_code_hash
                            sent_code = await client.send_code_request(phone)
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
                            await save_session_string(client)
                            return True, sent_code.phone_code_hash
                        else:
                            # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                            user = await client.get_me()
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                            await save_session_string(client)
                            st.session_state.user_id = user.id
                            st.session_state.phone = phone
                            return False, None
                        
                    need_code, phone_code_hash = run_async(send_code())
                    
                    if need_code:
                        st.session_state.phone = phone
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
                        st.session_state.phone_code_hash = phone_code_hash
                        st.session_state.page = "verify_code"
                        st.rerun()
                    else:
                        st.session_state.page = "dashboard"
                        st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")
        
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.page = "main"
            st.rerun()
            
        st.info("–ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –°–µ—Å—Å–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.")
        st.divider()
        st.caption("–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram API –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å Telegram Inc.")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞
def verify_code_page():
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.title("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ Telegram")
        st.write("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ Telegram")
        
        with st.form("verify_form"):
            code = st.text_input("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", placeholder="12345")
            submit = st.form_submit_button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", use_container_width=True)
            
            if submit and code:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telegram —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å–µ—Å—Å–∏–∏
                    client = create_client()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                    phone = st.session_state.phone
                    phone_code_hash = st.session_state.phone_code_hash
                    
                    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —Å –∫–æ–¥–æ–º
                    async def sign_in():
                        await client.connect()
                        try:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º phone_code_hash –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
                            await client.sign_in(phone, code, phone_code_hash=phone_code_hash)
                            user = await client.get_me()
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                            await save_session_string(client)
                            await client.disconnect()
                            return user.id, None
                        except SessionPasswordNeededError:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª—è
                            await save_session_string(client)
                            await client.disconnect()
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                            return None, True
                    
                    user_id, two_fa_needed = run_async(sign_in())
                    
                    if two_fa_needed:
                        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è 2FA, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
                        st.session_state.page = "two_fa"
                        st.rerun()
                    elif user_id:
                        # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å
                        st.session_state.user_id = user_id
                        st.session_state.page = "dashboard"
                        st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–æ–¥–∞: {str(e)}")
        
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.page = "login"
            st.rerun()
            
        st.info("–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–¥, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –Ω–∞ –≤–∞—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.")
        st.divider()
        st.caption("–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram API –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å Telegram Inc.")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è 2FA
def two_fa_page():
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.title("–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram")
        
        with st.form("two_fa_form"):
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            submit = st.form_submit_button("–í–æ–π—Ç–∏", use_container_width=True)
            
            if submit and password:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telegram —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å–µ—Å—Å–∏–∏
                    client = create_client()
                    
                    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —Å –ø–∞—Ä–æ–ª–µ–º
                    async def check_password():
                        await client.connect()
                        try:
                            await client.sign_in(password=password)
                            user = await client.get_me()
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                            await save_session_string(client)
                            await client.disconnect()
                            return user.id
                        except Exception as e:
                            await client.disconnect()
                            raise e
                    
                    user_id = run_async(check_password())
                    st.session_state.user_id = user_id
                    st.session_state.page = "dashboard"
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {str(e)}")
        
        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state.page = "verify_code"
            st.rerun()
            
        st.info("–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Telegram.")
        st.divider()
        st.caption("–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram API –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å Telegram Inc.")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –º–µ–¥–∏–∞
def dashboard_page():
    st.title("–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞")
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    col1, col2 = st.columns([6, 1])
    with col2:
        if st.button("–í—ã–π—Ç–∏", key="logout"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.session_state.page = "main"
            st.rerun()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤..."):
        favorites = get_favorites()
    
    if favorites:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        if st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã (ZIP)",
            data=get_all_media_zip(favorites),
            file_name="telegram_favorites.zip",
            mime="application/zip",
            use_container_width=True
        ):
            st.success("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!")
            
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ —Å–µ—Ç–∫–µ
        st.write("### –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 3 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cols_per_row = 3
        for i in range(0, len(favorites), cols_per_row):
            cols = st.columns(cols_per_row)
            for j in range(cols_per_row):
                if i + j < len(favorites):
                    item = favorites[i + j]
                    with cols[j]:
                        with st.container(border=True):
                            st.write(f"**–¢–∏–ø:** {item['type']}")
                            st.write(f"**–î–∞—Ç–∞:** {item['date']}")
                            st.write(f"**–§–∞–π–ª:** {item['filename']}")
                            
                            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                            media_data = get_media_data(item['id'])
                            if media_data:
                                st.download_button(
                                    label="–°–∫–∞—á–∞—Ç—å",
                                    data=media_data,
                                    file_name=item['filename'],
                                    key=f"download_{item['id']}"
                                )
    else:
        st.info("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–µ.")
        st.write("–î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤ Telegram –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
    
    st.divider()
    st.caption("–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram API –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å Telegram Inc.")

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
def get_favorites():
    try:
        if 'session_string' not in st.session_state:
            return []
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        client = create_client()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
        async def fetch_favorites():
            try:
                await client.connect()
                
                if not await client.is_user_authorized():
                    await client.disconnect()
                    return []
                
                favorites = []
                
                # –í–º–µ—Å—Ç–æ GetSavedDialogsRequest –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è" (Saved Messages)
                # –í Telegram —ç—Ç–æ –¥–∏–∞–ª–æ–≥ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
                messages = await client.get_messages('me', limit=200)
                
                # –û—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
                for message in messages:
                    if message.media:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
                        media_info = {
                            'id': message.id,
                            'date': message.date.strftime('%Y-%m-%d %H:%M:%S'),
                            'type': get_media_type(message),
                            'filename': get_filename(message)
                        }
                        favorites.append(media_info)
                
                await client.disconnect()
                return favorites
            except Exception as e:
                if client.is_connected():
                    await client.disconnect()
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {str(e)}")
                return []
        
        return run_async(fetch_favorites())
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {str(e)}")
        return []

# –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
def get_media_data(message_id):
    try:
        if 'session_string' not in st.session_state:
            return None
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        client = create_client()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API
        async def download_media():
            try:
                await client.connect()
                
                if not await client.is_user_authorized():
                    await client.disconnect()
                    return None
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ - –∞—Ä–≥—É–º–µ–Ω—Ç ids –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
                message = await client.get_messages('me', ids=message_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞
                if not message or not message.media:
                    await client.disconnect()
                    return None
                
                file_buffer = io.BytesIO()
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
                await client.download_media(message, file_buffer)
                
                file_buffer.seek(0)
                result = file_buffer.read()
                
                await client.disconnect()
                return result
            except Exception as e:
                if client.is_connected():
                    await client.disconnect()
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")
                return None
        
        return run_async(download_media())
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")
        return None

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ ZIP-–∞—Ä—Ö–∏–≤–µ
def get_all_media_zip(favorites):
    try:
        if 'session_string' not in st.session_state:
            return None
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        client = create_client()
        
        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
        async def download_all_media():
            try:
                await client.connect()
                
                if not await client.is_user_authorized():
                    await client.disconnect()
                    return None
                
                memory_file = io.BytesIO()
                with zipfile.ZipFile(memory_file, 'w') as zf:
                    for item in favorites:
                        message_id = item['id']
                        filename = item['filename']
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –∞—Ä–≥—É–º–µ–Ω—Ç ids –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫
                        message = await client.get_messages('me', ids=message_id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞
                        if message and message.media:
                            file_buffer = io.BytesIO()
                            
                            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                            await client.download_media(message, file_buffer)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞—Ä—Ö–∏–≤
                            file_buffer.seek(0)
                            zf.writestr(filename, file_buffer.read())
                
                await client.disconnect()
                memory_file.seek(0)
                return memory_file.getvalue()
            except Exception as e:
                if client.is_connected():
                    await client.disconnect()
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}")
                return None
        
        return run_async(download_all_media())
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}")
        return None

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
def apply_custom_styles():
    st.markdown("""
    <style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    h1 {
        color: #0088cc;
    }
    .stButton button {
        background-color: #0088cc;
        color: white;
    }
    .stDownloadButton button {
        background-color: #28a745;
        color: white;
    }
    footer {
        visibility: hidden;
    }
    </style>
    """, unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if 'page' not in st.session_state:
    st.session_state.page = "main"

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
apply_custom_styles()

# –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
if st.session_state.page == "main":
    main_page()
elif st.session_state.page == "login":
    login_page()
elif st.session_state.page == "verify_code":
    verify_code_page()
elif st.session_state.page == "two_fa":
    two_fa_page()
elif st.session_state.page == "dashboard":
    dashboard_page()